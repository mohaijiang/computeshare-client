// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.2
// source: api/system/v1/agent_register.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AgentRegister_Register_FullMethodName   = "/api.system.v1.AgentRegister/Register"
	AgentRegister_Heartbeat_FullMethodName  = "/api.system.v1.AgentRegister/Heartbeat"
	AgentRegister_UnRegister_FullMethodName = "/api.system.v1.AgentRegister/UnRegister"
)

// AgentRegisterClient is the client API for AgentRegister service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgentRegisterClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterReply, error)
	Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatReply, error)
	UnRegister(ctx context.Context, in *UnRegisterRequest, opts ...grpc.CallOption) (*UnRegisterReply, error)
}

type agentRegisterClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentRegisterClient(cc grpc.ClientConnInterface) AgentRegisterClient {
	return &agentRegisterClient{cc}
}

func (c *agentRegisterClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterReply, error) {
	out := new(RegisterReply)
	err := c.cc.Invoke(ctx, AgentRegister_Register_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentRegisterClient) Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatReply, error) {
	out := new(HeartbeatReply)
	err := c.cc.Invoke(ctx, AgentRegister_Heartbeat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentRegisterClient) UnRegister(ctx context.Context, in *UnRegisterRequest, opts ...grpc.CallOption) (*UnRegisterReply, error) {
	out := new(UnRegisterReply)
	err := c.cc.Invoke(ctx, AgentRegister_UnRegister_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgentRegisterServer is the server API for AgentRegister service.
// All implementations must embed UnimplementedAgentRegisterServer
// for forward compatibility
type AgentRegisterServer interface {
	Register(context.Context, *RegisterRequest) (*RegisterReply, error)
	Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatReply, error)
	UnRegister(context.Context, *UnRegisterRequest) (*UnRegisterReply, error)
	mustEmbedUnimplementedAgentRegisterServer()
}

// UnimplementedAgentRegisterServer must be embedded to have forward compatible implementations.
type UnimplementedAgentRegisterServer struct {
}

func (UnimplementedAgentRegisterServer) Register(context.Context, *RegisterRequest) (*RegisterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedAgentRegisterServer) Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (UnimplementedAgentRegisterServer) UnRegister(context.Context, *UnRegisterRequest) (*UnRegisterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnRegister not implemented")
}
func (UnimplementedAgentRegisterServer) mustEmbedUnimplementedAgentRegisterServer() {}

// UnsafeAgentRegisterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentRegisterServer will
// result in compilation errors.
type UnsafeAgentRegisterServer interface {
	mustEmbedUnimplementedAgentRegisterServer()
}

func RegisterAgentRegisterServer(s grpc.ServiceRegistrar, srv AgentRegisterServer) {
	s.RegisterService(&AgentRegister_ServiceDesc, srv)
}

func _AgentRegister_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentRegisterServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentRegister_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentRegisterServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentRegister_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentRegisterServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentRegister_Heartbeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentRegisterServer).Heartbeat(ctx, req.(*HeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentRegister_UnRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentRegisterServer).UnRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentRegister_UnRegister_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentRegisterServer).UnRegister(ctx, req.(*UnRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AgentRegister_ServiceDesc is the grpc.ServiceDesc for AgentRegister service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AgentRegister_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.system.v1.AgentRegister",
	HandlerType: (*AgentRegisterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _AgentRegister_Register_Handler,
		},
		{
			MethodName: "Heartbeat",
			Handler:    _AgentRegister_Heartbeat_Handler,
		},
		{
			MethodName: "UnRegister",
			Handler:    _AgentRegister_UnRegister_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/system/v1/agent_register.proto",
}
