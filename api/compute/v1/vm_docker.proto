syntax = "proto3";

package api.compute.v1;

import "google/api/annotations.proto";

option go_package = "github.com/mohaijiang/computeshare-client/api/compute/v1;v1";
option java_multiple_files = true;
option java_package = "api.compute.v1";

service VmDocker {
	rpc CreateVm (CreateVmDockerRequest) returns (GetVmDockerReply){
		option (google.api.http) = {
			post: "/v1/vm/docker",
			body: "*",
		};
	};
	rpc DeleteVm (DeleteVmDockerRequest) returns (DeleteVmDockerReply){
		option (google.api.http) = {
			delete: "/v1/vm/docker/{id}",
		};
	};
	rpc GetVm (GetVmDockerRequest) returns (GetVmDockerReply) {
		option (google.api.http) = {
			get: "/v1/vm/docker/{id}",
		};
	};
	rpc ListVm (ListVmDockerRequest) returns (ListVmDockerReply){
		option (google.api.http) = {
			get: "/v1/vm/docker",
		};
	};

	rpc StartVm(GetVmDockerRequest) returns (GetVmDockerReply) {
		option (google.api.http) = {
			put: "/v1/vm/docker/{id}/start",
			body: "*"
		};
	}

	rpc StopVm(GetVmDockerRequest) returns (GetVmDockerReply) {
		option (google.api.http) = {
			put: "/v1/vm/docker/{id}/stop",
			body: "*"
		};
	}
}

message CreateVmDockerRequest {
	string image = 1;
	string port = 2;
	repeated string command = 3;
	string business_id = 4;
}

message PortBinding {
	string ip = 1;
	uint32 private_port = 2;
	uint32 public_port = 3;
	string type = 4;
}

message DeleteVmDockerRequest {
	string id = 1;
}
message DeleteVmDockerReply {}

message GetVmDockerRequest {
	string id = 1;
}
message GetVmDockerReply {
	string id = 1;
	string image = 2;
	repeated PortBinding ports = 3;
	uint64 cpuUsage = 4;
	uint64 memoryUsage = 5;
}

message ListVmDockerRequest {}
message ListVmDockerReply {
	repeated GetVmDockerReply result = 1;
}
