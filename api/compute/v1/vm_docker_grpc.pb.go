// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.2
// source: api/compute/v1/vm_docker.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	VmDocker_CreateVm_FullMethodName = "/api.compute.v1.VmDocker/CreateVm"
	VmDocker_DeleteVm_FullMethodName = "/api.compute.v1.VmDocker/DeleteVm"
	VmDocker_GetVm_FullMethodName    = "/api.compute.v1.VmDocker/GetVm"
	VmDocker_ListVm_FullMethodName   = "/api.compute.v1.VmDocker/ListVm"
	VmDocker_StartVm_FullMethodName  = "/api.compute.v1.VmDocker/StartVm"
	VmDocker_StopVm_FullMethodName   = "/api.compute.v1.VmDocker/StopVm"
)

// VmDockerClient is the client API for VmDocker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VmDockerClient interface {
	CreateVm(ctx context.Context, in *CreateVmDockerRequest, opts ...grpc.CallOption) (*GetVmDockerReply, error)
	DeleteVm(ctx context.Context, in *DeleteVmDockerRequest, opts ...grpc.CallOption) (*DeleteVmDockerReply, error)
	GetVm(ctx context.Context, in *GetVmDockerRequest, opts ...grpc.CallOption) (*GetVmDockerReply, error)
	ListVm(ctx context.Context, in *ListVmDockerRequest, opts ...grpc.CallOption) (*ListVmDockerReply, error)
	StartVm(ctx context.Context, in *GetVmDockerRequest, opts ...grpc.CallOption) (*GetVmDockerReply, error)
	StopVm(ctx context.Context, in *GetVmDockerRequest, opts ...grpc.CallOption) (*GetVmDockerReply, error)
}

type vmDockerClient struct {
	cc grpc.ClientConnInterface
}

func NewVmDockerClient(cc grpc.ClientConnInterface) VmDockerClient {
	return &vmDockerClient{cc}
}

func (c *vmDockerClient) CreateVm(ctx context.Context, in *CreateVmDockerRequest, opts ...grpc.CallOption) (*GetVmDockerReply, error) {
	out := new(GetVmDockerReply)
	err := c.cc.Invoke(ctx, VmDocker_CreateVm_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vmDockerClient) DeleteVm(ctx context.Context, in *DeleteVmDockerRequest, opts ...grpc.CallOption) (*DeleteVmDockerReply, error) {
	out := new(DeleteVmDockerReply)
	err := c.cc.Invoke(ctx, VmDocker_DeleteVm_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vmDockerClient) GetVm(ctx context.Context, in *GetVmDockerRequest, opts ...grpc.CallOption) (*GetVmDockerReply, error) {
	out := new(GetVmDockerReply)
	err := c.cc.Invoke(ctx, VmDocker_GetVm_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vmDockerClient) ListVm(ctx context.Context, in *ListVmDockerRequest, opts ...grpc.CallOption) (*ListVmDockerReply, error) {
	out := new(ListVmDockerReply)
	err := c.cc.Invoke(ctx, VmDocker_ListVm_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vmDockerClient) StartVm(ctx context.Context, in *GetVmDockerRequest, opts ...grpc.CallOption) (*GetVmDockerReply, error) {
	out := new(GetVmDockerReply)
	err := c.cc.Invoke(ctx, VmDocker_StartVm_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vmDockerClient) StopVm(ctx context.Context, in *GetVmDockerRequest, opts ...grpc.CallOption) (*GetVmDockerReply, error) {
	out := new(GetVmDockerReply)
	err := c.cc.Invoke(ctx, VmDocker_StopVm_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VmDockerServer is the server API for VmDocker service.
// All implementations must embed UnimplementedVmDockerServer
// for forward compatibility
type VmDockerServer interface {
	CreateVm(context.Context, *CreateVmDockerRequest) (*GetVmDockerReply, error)
	DeleteVm(context.Context, *DeleteVmDockerRequest) (*DeleteVmDockerReply, error)
	GetVm(context.Context, *GetVmDockerRequest) (*GetVmDockerReply, error)
	ListVm(context.Context, *ListVmDockerRequest) (*ListVmDockerReply, error)
	StartVm(context.Context, *GetVmDockerRequest) (*GetVmDockerReply, error)
	StopVm(context.Context, *GetVmDockerRequest) (*GetVmDockerReply, error)
	mustEmbedUnimplementedVmDockerServer()
}

// UnimplementedVmDockerServer must be embedded to have forward compatible implementations.
type UnimplementedVmDockerServer struct {
}

func (UnimplementedVmDockerServer) CreateVm(context.Context, *CreateVmDockerRequest) (*GetVmDockerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVm not implemented")
}
func (UnimplementedVmDockerServer) DeleteVm(context.Context, *DeleteVmDockerRequest) (*DeleteVmDockerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVm not implemented")
}
func (UnimplementedVmDockerServer) GetVm(context.Context, *GetVmDockerRequest) (*GetVmDockerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVm not implemented")
}
func (UnimplementedVmDockerServer) ListVm(context.Context, *ListVmDockerRequest) (*ListVmDockerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVm not implemented")
}
func (UnimplementedVmDockerServer) StartVm(context.Context, *GetVmDockerRequest) (*GetVmDockerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartVm not implemented")
}
func (UnimplementedVmDockerServer) StopVm(context.Context, *GetVmDockerRequest) (*GetVmDockerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopVm not implemented")
}
func (UnimplementedVmDockerServer) mustEmbedUnimplementedVmDockerServer() {}

// UnsafeVmDockerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VmDockerServer will
// result in compilation errors.
type UnsafeVmDockerServer interface {
	mustEmbedUnimplementedVmDockerServer()
}

func RegisterVmDockerServer(s grpc.ServiceRegistrar, srv VmDockerServer) {
	s.RegisterService(&VmDocker_ServiceDesc, srv)
}

func _VmDocker_CreateVm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVmDockerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VmDockerServer).CreateVm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VmDocker_CreateVm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VmDockerServer).CreateVm(ctx, req.(*CreateVmDockerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VmDocker_DeleteVm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVmDockerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VmDockerServer).DeleteVm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VmDocker_DeleteVm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VmDockerServer).DeleteVm(ctx, req.(*DeleteVmDockerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VmDocker_GetVm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVmDockerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VmDockerServer).GetVm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VmDocker_GetVm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VmDockerServer).GetVm(ctx, req.(*GetVmDockerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VmDocker_ListVm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVmDockerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VmDockerServer).ListVm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VmDocker_ListVm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VmDockerServer).ListVm(ctx, req.(*ListVmDockerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VmDocker_StartVm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVmDockerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VmDockerServer).StartVm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VmDocker_StartVm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VmDockerServer).StartVm(ctx, req.(*GetVmDockerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VmDocker_StopVm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVmDockerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VmDockerServer).StopVm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VmDocker_StopVm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VmDockerServer).StopVm(ctx, req.(*GetVmDockerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VmDocker_ServiceDesc is the grpc.ServiceDesc for VmDocker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VmDocker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.compute.v1.VmDocker",
	HandlerType: (*VmDockerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVm",
			Handler:    _VmDocker_CreateVm_Handler,
		},
		{
			MethodName: "DeleteVm",
			Handler:    _VmDocker_DeleteVm_Handler,
		},
		{
			MethodName: "GetVm",
			Handler:    _VmDocker_GetVm_Handler,
		},
		{
			MethodName: "ListVm",
			Handler:    _VmDocker_ListVm_Handler,
		},
		{
			MethodName: "StartVm",
			Handler:    _VmDocker_StartVm_Handler,
		},
		{
			MethodName: "StopVm",
			Handler:    _VmDocker_StopVm_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/compute/v1/vm_docker.proto",
}
