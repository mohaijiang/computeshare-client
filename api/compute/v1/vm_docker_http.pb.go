// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.0
// - protoc             v4.23.2
// source: api/compute/v1/vm_docker.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationVmDockerCreateVm = "/api.compute.v1.VmDocker/CreateVm"
const OperationVmDockerDeleteVm = "/api.compute.v1.VmDocker/DeleteVm"
const OperationVmDockerGetVm = "/api.compute.v1.VmDocker/GetVm"
const OperationVmDockerListVm = "/api.compute.v1.VmDocker/ListVm"
const OperationVmDockerStartVm = "/api.compute.v1.VmDocker/StartVm"
const OperationVmDockerStopVm = "/api.compute.v1.VmDocker/StopVm"

type VmDockerHTTPServer interface {
	CreateVm(context.Context, *CreateVmDockerRequest) (*GetVmDockerReply, error)
	DeleteVm(context.Context, *DeleteVmDockerRequest) (*DeleteVmDockerReply, error)
	GetVm(context.Context, *GetVmDockerRequest) (*GetVmDockerReply, error)
	ListVm(context.Context, *ListVmDockerRequest) (*ListVmDockerReply, error)
	StartVm(context.Context, *GetVmDockerRequest) (*GetVmDockerReply, error)
	StopVm(context.Context, *GetVmDockerRequest) (*GetVmDockerReply, error)
}

func RegisterVmDockerHTTPServer(s *http.Server, srv VmDockerHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/vm/docker", _VmDocker_CreateVm0_HTTP_Handler(srv))
	r.DELETE("/v1/vm/docker/{id}", _VmDocker_DeleteVm0_HTTP_Handler(srv))
	r.GET("/v1/vm/docker/{id}", _VmDocker_GetVm0_HTTP_Handler(srv))
	r.GET("/v1/vm/docker", _VmDocker_ListVm0_HTTP_Handler(srv))
	r.PUT("/v1/vm/docker/{id}/start", _VmDocker_StartVm0_HTTP_Handler(srv))
	r.PUT("/v1/vm/docker/{id}/stop", _VmDocker_StopVm0_HTTP_Handler(srv))
}

func _VmDocker_CreateVm0_HTTP_Handler(srv VmDockerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateVmDockerRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationVmDockerCreateVm)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateVm(ctx, req.(*CreateVmDockerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetVmDockerReply)
		return ctx.Result(200, reply)
	}
}

func _VmDocker_DeleteVm0_HTTP_Handler(srv VmDockerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteVmDockerRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationVmDockerDeleteVm)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteVm(ctx, req.(*DeleteVmDockerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteVmDockerReply)
		return ctx.Result(200, reply)
	}
}

func _VmDocker_GetVm0_HTTP_Handler(srv VmDockerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetVmDockerRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationVmDockerGetVm)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetVm(ctx, req.(*GetVmDockerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetVmDockerReply)
		return ctx.Result(200, reply)
	}
}

func _VmDocker_ListVm0_HTTP_Handler(srv VmDockerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListVmDockerRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationVmDockerListVm)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListVm(ctx, req.(*ListVmDockerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListVmDockerReply)
		return ctx.Result(200, reply)
	}
}

func _VmDocker_StartVm0_HTTP_Handler(srv VmDockerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetVmDockerRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationVmDockerStartVm)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.StartVm(ctx, req.(*GetVmDockerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetVmDockerReply)
		return ctx.Result(200, reply)
	}
}

func _VmDocker_StopVm0_HTTP_Handler(srv VmDockerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetVmDockerRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationVmDockerStopVm)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.StopVm(ctx, req.(*GetVmDockerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetVmDockerReply)
		return ctx.Result(200, reply)
	}
}

type VmDockerHTTPClient interface {
	CreateVm(ctx context.Context, req *CreateVmDockerRequest, opts ...http.CallOption) (rsp *GetVmDockerReply, err error)
	DeleteVm(ctx context.Context, req *DeleteVmDockerRequest, opts ...http.CallOption) (rsp *DeleteVmDockerReply, err error)
	GetVm(ctx context.Context, req *GetVmDockerRequest, opts ...http.CallOption) (rsp *GetVmDockerReply, err error)
	ListVm(ctx context.Context, req *ListVmDockerRequest, opts ...http.CallOption) (rsp *ListVmDockerReply, err error)
	StartVm(ctx context.Context, req *GetVmDockerRequest, opts ...http.CallOption) (rsp *GetVmDockerReply, err error)
	StopVm(ctx context.Context, req *GetVmDockerRequest, opts ...http.CallOption) (rsp *GetVmDockerReply, err error)
}

type VmDockerHTTPClientImpl struct {
	cc *http.Client
}

func NewVmDockerHTTPClient(client *http.Client) VmDockerHTTPClient {
	return &VmDockerHTTPClientImpl{client}
}

func (c *VmDockerHTTPClientImpl) CreateVm(ctx context.Context, in *CreateVmDockerRequest, opts ...http.CallOption) (*GetVmDockerReply, error) {
	var out GetVmDockerReply
	pattern := "/v1/vm/docker"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationVmDockerCreateVm))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *VmDockerHTTPClientImpl) DeleteVm(ctx context.Context, in *DeleteVmDockerRequest, opts ...http.CallOption) (*DeleteVmDockerReply, error) {
	var out DeleteVmDockerReply
	pattern := "/v1/vm/docker/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationVmDockerDeleteVm))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *VmDockerHTTPClientImpl) GetVm(ctx context.Context, in *GetVmDockerRequest, opts ...http.CallOption) (*GetVmDockerReply, error) {
	var out GetVmDockerReply
	pattern := "/v1/vm/docker/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationVmDockerGetVm))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *VmDockerHTTPClientImpl) ListVm(ctx context.Context, in *ListVmDockerRequest, opts ...http.CallOption) (*ListVmDockerReply, error) {
	var out ListVmDockerReply
	pattern := "/v1/vm/docker"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationVmDockerListVm))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *VmDockerHTTPClientImpl) StartVm(ctx context.Context, in *GetVmDockerRequest, opts ...http.CallOption) (*GetVmDockerReply, error) {
	var out GetVmDockerReply
	pattern := "/v1/vm/docker/{id}/start"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationVmDockerStartVm))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *VmDockerHTTPClientImpl) StopVm(ctx context.Context, in *GetVmDockerRequest, opts ...http.CallOption) (*GetVmDockerReply, error) {
	var out GetVmDockerReply
	pattern := "/v1/vm/docker/{id}/stop"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationVmDockerStopVm))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
