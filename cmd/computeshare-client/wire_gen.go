// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"github.com/mohaijiang/computeshare-client/internal/biz"
	"github.com/mohaijiang/computeshare-client/internal/biz/vm"
	"github.com/mohaijiang/computeshare-client/internal/conf"
	"github.com/mohaijiang/computeshare-client/internal/server"
	"github.com/mohaijiang/computeshare-client/internal/service"
	"github.com/mohaijiang/computeshare-client/third_party/agent"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, data *conf.Data, logger log.Logger) (*kratos.App, func(), error) {
	grpcServer := server.NewGRPCServer(confServer, logger)
	client, err := service.NewDockerCli()
	if err != nil {
		return nil, nil, err
	}
	httpClient, cleanup, err := agent.NewHttpConnection(data)
	if err != nil {
		return nil, nil, err
	}
	agentService := agent.NewAgentService(httpClient)
	vmDockerService := service.NewVmDockerService(client, agentService, logger)
	shell := service.NewIpfShell(data)
	computePowerService, err := service.NewComputePowerService(shell, client, logger)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	vmWebsocketHandler := service.NewVmWebsocketHandler(client)
	p2pClient, err := biz.NewP2pClient(confServer)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	virtManager, err := vm.NewVirtManager(logger)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	cronJob := service.NewCronJob(vmDockerService, agentService, p2pClient, virtManager, logger)
	httpServer := server.NewHTTPServer(confServer, vmDockerService, computePowerService, agentService, vmWebsocketHandler, cronJob, logger)
	app := newApp(logger, grpcServer, httpServer)
	return app, func() {
		cleanup()
	}, nil
}
